clear

%--------------------------------------------------------------------------
iseed = 1;
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
LD.alloy_conc = 0.0;
%--------------------------------------------------------------------------

%MASSES
%--------------------------------------------------------------------------
LD.mass(1) = 1.0; LD.mass(2) = 3.0;
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
[tmp,str.main] = system('pwd'); str.main_write = str.main;

%str.main = strcat('/home/jason/lammps/LJ/alloy/10K/0.5/8x/NMD_AF/');

str.main = strcat('/home/jason/lammps/LJ/amorphous/8x/AF/');

% %convert freq to cols
% SED = nmd_convert_data(NMD,SED);

% SED = load(strcat(str.main,'1/SEDdata.mat'));
% NMD = load(strcat(str.main,'1/NMDdata.mat'));

AF = load(strcat(str.main,'AFdk_1.mat'));


%check parabola

for imode = 1:size(AF.freq,1)

% subplot(2,1,1),...
%     plot(...
%     AF.DK(:,1),...
%     [...
%     AF.freq(imode,:) ...
%     ])
% xlabel('k (LJ units)'); ylabel('\omega (LJ units)');
% subplot(2,1,2),...
%     plot(AF.DK(2:size(AF.freq,2),1),AF.groupvelx(imode,:),'.')
% xlabel('k (LJ units)'); 
% ylabel('v_g ~ \delta \omega / \delta k (LJ units)');

%--------------------------------------------------------------------------
%pause
%--------------------------------------------------------------------------


%     quad_func =...
%         @(c,k)...
%         (    c(1)*k.^2 + c(2)*k + c(3)   );

%     quad_func =...
%         @(c,k)...
%         (    c(1)*k.^2 + c(2)   );
% 
%     options =...
%         optimset(...
%         'MaxIter',5000,'MaxFunEvals',5000,'TolFun',1e-2,'TolX',1e-2);  
    
%     c0 = [ 1.1, 1.1, freq(imode,1) ]; 

%     c0 = [ 0, freq(imode,1) ]; 
    
%     lb(1:length(c0)) = 0.0; ub(1:3:length(c0)) =...
%         max(SED.irrkpt.sedavg(:,imode,kpt_cnt))*10; 
%     ub(2:3:length(c0)) = 10000; ub(3:3:length(c0)) = w(length(w));
    
%     [c_fit] =...
%         lsqcurvefit(...
%         quad_func,c0,w(wleft:wright),...
%         SED.irrkpt.sedavg(wleft:wright,imode,kpt_cnt),...
%         lb,ub,options);

%     [c_fit] =...
%         lsqcurvefit(...
%         quad_func,...
%         c0,...
%         AF.AF{1}.DK(:,1)',...
%         freq(imode,:)...
%         );
    
%     plot(...
%         AF.AF{1}.DK(:,1),...
%         freq(imode,:),'.',...
%         AF.AF{1}.DK(:,1),...
%         quad_func(c_fit,AF.AF{1}.DK(:,1))...
%         )

    plot(...
    AF.DK(:,1),...
    [...
    AF.freq(imode,:) ...
    ])

%--------------------------------------------------------------------------
pause
%--------------------------------------------------------------------------

   clf 
    [p,ErrorEst] = polyfit(AF.DK(:,1)',AF.freq(imode,:),2)
    p(2)/(2*pi)
    % Evaluate the fit
    pop_fit = polyval(p,AF.DK(:,1)',ErrorEst);
    % Plot the data and the fit
    plot(AF.DK(:,1)',pop_fit,'-',AF.DK(:,1),AF.freq(imode,:),'+');
    %Annotate the plot
    legend('Polynomial Model','Data','Location','NorthWest');
    xlabel('k');
    ylabel('\omega(k)');
%groupvel by finite difference
%     AF.groupvelx(imode) = p(2)/(2*pi) ; 
    
    AF.groupvelx(imode,:) =...
    (...
    AF.freq(imode,2:size(AF.freq,2)) -...
    AF.freq(imode,1:size(AF.freq,2)-1) ...
    ) / (2*pi*AF.dk) ; 

    plot( AF.DK(2:size(AF.DK,1),1), AF.groupvelx(imode,:),'.')
    
   

%--------------------------------------------------------------------------
pause
%--------------------------------------------------------------------------



% AF.groupvel(:,1) =...
%     real( AF.freq(:,2) - freq(:,1) )/(2*pi*AF.dk);
% AF.groupvel(:,2) =...
%     real( freq(:,3) - freq(:,1) )/(2*pi*AF.dk);
% AF.groupvel(:,3) =...
%     real( freq(:,4) - freq(:,1) )/(2*pi*AF.dk);


end

figure

semilogy(...
    SED.irrkpt.sedfreq,...
    abs(squeeze(SED.irrkpt.HLDvel(:,1,:))*(AF.LJ.tau/AF.LJ.sigma)),'.',...
    AF.freq,...
    abs(AF.groupvelx),'.')




% 
% for idk = 2:size(AF.AF{1}.DK,1)
% 
% % AF.AF{1}.groupvelx(:,idk) =...
% %     real((AF.AF{idk}.freq - AF.AF{1}.freq))/(2*pi*(idk-1)*AF.AF{1}.dk);
% % AF.AF{1}.groupvely(:,idk) =...
% %     real((AF.AF{idk}.freq - AF.AF{1}.freq))/(2*pi*(idk-1)*AF.AF{1}.dk);
% % AF.AF{1}.groupvelz(:,idk) =...
% %     real((AF.AF{idk}.freq - AF.AF{1}.freq))/(2*pi*(idk-1)*AF.AF{1}.dk);
% 
% 
% 
% % plot(...
% %     AF.AF.freq,...
% %     AF.AF.LJ.sigma/AF.AF.LJ.tau*sqrt(...
% %     AF.AF.groupvel(:,1).^2 + ...
% %     AF.AF.groupvel(:,1).^2 + ...
% %     AF.AF.groupvel(:,1).^2 ), ...
% %     '.')
% 
% end
% 
% plot(...
%     AF.AF{1}.DK(2,1),AF.AF{1}.groupvelx(1:10,2),'.',...
%     AF.AF{1}.DK(3,1),AF.AF{1}.groupvelx(1:10,3),'.',...
%     AF.AF{1}.DK(4,1),AF.AF{1}.groupvelx(1:10,4),'.',...
%     AF.AF{1}.DK(5,1),AF.AF{1}.groupvelx(1:10,5),'.',...
%     AF.AF{1}.DK(6,1),AF.AF{1}.groupvelx(1:10,6),'.',...
%     AF.AF{1}.DK(7,1),AF.AF{1}.groupvelx(1:10,7),'.',...
%     AF.AF{1}.DK(8,1),AF.AF{1}.groupvelx(1:10,8),'.',...
%     AF.AF{1}.DK(9,1),AF.AF{1}.groupvelx(1:10,9),'.',...
%     AF.AF{1}.DK(10,1),AF.AF{1}.groupvelx(1:10,10),'.',...
%     AF.AF{1}.DK(11,1),AF.AF{1}.groupvelx(1:10,11),'.'...
%     )


    
% save(...
%     strcat(str.main,'AF_groupvel_1.mat')...
%     , '-struct', 'AFsave');

