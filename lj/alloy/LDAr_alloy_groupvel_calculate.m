clear

%--------------------------------------------------------------------------
iseed = 1;
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
LD.alloy_conc = 0.0;
%--------------------------------------------------------------------------

%MASSES
%--------------------------------------------------------------------------
LD.mass(1) = 1.0; LD.mass(2) = 3.0;
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
[tmp,str.main] = system('pwd'); str.main_write = str.main;

str.main = strcat('/home/jason/lammps/LJ/alloy/10K/0.05/4x/NMD/');

% str.main = strcat('/home/jason/lammps/LJ/amorphous/4x/AF/');


AF = load(strcat(str.main,'AFdk_1.mat'));


%check parabola

for imode = 1:size(AF.freq,1)

plot(...
    AF.DK(:,1),...
    [...
    AF.freq(imode,:) ...
    ])


%     quad_func =...
%         @(c,k)...
%         (    c(1)*k.^2 + c(2)*k + c(3)   );

%     quad_func =...
%         @(c,k)...
%         (    c(1)*k.^2 + c(2)   );
% 
%     options =...
%         optimset(...
%         'MaxIter',5000,'MaxFunEvals',5000,'TolFun',1e-2,'TolX',1e-2);  
    
%     c0 = [ 1.1, 1.1, freq(imode,1) ]; 

%     c0 = [ 0, freq(imode,1) ]; 
    
%     lb(1:length(c0)) = 0.0; ub(1:3:length(c0)) =...
%         max(SED.irrkpt.sedavg(:,imode,kpt_cnt))*10; 
%     ub(2:3:length(c0)) = 10000; ub(3:3:length(c0)) = w(length(w));
    
%     [c_fit] =...
%         lsqcurvefit(...
%         quad_func,c0,w(wleft:wright),...
%         SED.irrkpt.sedavg(wleft:wright,imode,kpt_cnt),...
%         lb,ub,options);

%     [c_fit] =...
%         lsqcurvefit(...
%         quad_func,...
%         c0,...
%         AF.AF{1}.DK(:,1)',...
%         freq(imode,:)...
%         );
    
%     plot(...
%         AF.AF{1}.DK(:,1),...
%         freq(imode,:),'.',...
%         AF.AF{1}.DK(:,1),...
%         quad_func(c_fit,AF.AF{1}.DK(:,1))...
%         )
    
%     
%     [p,ErrorEst] = polyfit(AF.AF{1}.DK(:,1)',freq(imode,:),2)
%     % Evaluate the fit
%     pop_fit = polyval(p,AF.AF{1}.DK(:,1)',ErrorEst);
%     % Plot the data and the fit
%     plot(AF.AF{1}.DK(:,1)',pop_fit,'-',AF.AF{1}.DK(:,1),freq(imode,:),'+');
    % Annotate the plot
%     legend('Polynomial Model','Data','Location','NorthWest');
%     xlabel('Census Year');
%     ylabel('Population (millions)');
    
    
%         AF.AF{1}.DK(:,1),quad_func(c0,AF.AF{1}.DK(:,1))...
%         )

AF.groupvel(imode,1) =...
    real( AF.freq(imode,2) - AF.freq(imode,1) )/(2*pi*AF.dk);
AF.groupvel(imode,2) =...
    real( AF.freq(imode,3) - AF.freq(imode,1) )/(2*pi*AF.dk);
AF.groupvel(imode,3) =...
    real( AF.freq(imode,4) - AF.freq(imode,1) )/(2*pi*AF.dk);

plot(AF.groupvel(imode,:),'.')

%--------------------------------------------------------------------------
pause
%--------------------------------------------------------------------------
end




for idk = 2:size(AF.AF{1}.DK,1)

% AF.AF{1}.groupvelx(:,idk) =...
%     real((AF.AF{idk}.freq - AF.AF{1}.freq))/(2*pi*(idk-1)*AF.AF{1}.dk);
% AF.AF{1}.groupvely(:,idk) =...
%     real((AF.AF{idk}.freq - AF.AF{1}.freq))/(2*pi*(idk-1)*AF.AF{1}.dk);
% AF.AF{1}.groupvelz(:,idk) =...
%     real((AF.AF{idk}.freq - AF.AF{1}.freq))/(2*pi*(idk-1)*AF.AF{1}.dk);



% plot(...
%     AF.AF.freq,...
%     AF.AF.LJ.sigma/AF.AF.LJ.tau*sqrt(...
%     AF.AF.groupvel(:,1).^2 + ...
%     AF.AF.groupvel(:,1).^2 + ...
%     AF.AF.groupvel(:,1).^2 ), ...
%     '.')

end

plot(...
    AF.AF{1}.DK(2,1),AF.AF{1}.groupvelx(1:10,2),'.',...
    AF.AF{1}.DK(3,1),AF.AF{1}.groupvelx(1:10,3),'.',...
    AF.AF{1}.DK(4,1),AF.AF{1}.groupvelx(1:10,4),'.',...
    AF.AF{1}.DK(5,1),AF.AF{1}.groupvelx(1:10,5),'.',...
    AF.AF{1}.DK(6,1),AF.AF{1}.groupvelx(1:10,6),'.',...
    AF.AF{1}.DK(7,1),AF.AF{1}.groupvelx(1:10,7),'.',...
    AF.AF{1}.DK(8,1),AF.AF{1}.groupvelx(1:10,8),'.',...
    AF.AF{1}.DK(9,1),AF.AF{1}.groupvelx(1:10,9),'.',...
    AF.AF{1}.DK(10,1),AF.AF{1}.groupvelx(1:10,10),'.',...
    AF.AF{1}.DK(11,1),AF.AF{1}.groupvelx(1:10,11),'.'...
    )


    
% save(...
%     strcat(str.main,'AF_groupvel_1.mat')...
%     , '-struct', 'AFsave');

